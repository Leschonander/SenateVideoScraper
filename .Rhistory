library(lubridate)
library(RPostgreSQL)
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
query <- dbSendQuery(con, 'SELECT * FROM "NYT_Tweets"')
nyt_df <- dbFetch(query, n = -1)
dbDisconnect(con)
View(nyt_df)
library(tidyverse)
library(lubridate)
library(rtweet)
library(RPostgreSQL)
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
api_key <- '2Ym959zjGjQUkVO4NSxyPOvJh'
api_secret_key <- 'OKF9h6hb46ifKyZknM5ASEVUmAmrBM2WG3Xb7nPngbqVCpvOBd'
access_token <- '828366980805754880-U17fww5lLAhs2S8cQRBN6dXv9cQFB2u'
access_token_secret <- 'ktMLoIibr6dHq2noNYHG4dDKaOy7HCKyN83qj01DXXlbw'
token <- create_token(
app = "VenmoTweetBot",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
nyt_tweets <- get_timeline(c("nhannahjones", "TaylorLorenz"), n = 200, token = token)
nyt_tweets_data <- nyt_tweets %>%
mutate(
Date = date(created_at),
DateTime = as_datetime(created_at)
) %>%
select(screen_name, text, status_url, is_retweet, Date,DateTime) %>%
filter(Date %in% c(today(), today() - 1))
nyt_tweets_data
nyt_tweets_data %>%
dbAppendTable(con, "NYT_Tweets", ., row.names = TRUE)
nyt_tweets_data %>%
dbAppendTable(con, "NYT_Tweets", ., row.names = FALSE)
nyt_tweets_data %>%
dbAppendTable(con, "NYT_Tweets", .)
View(nyt_tweets_data)
query <- dbSendQuery(con, 'SELECT * FROM "NYT_Tweets"')
nyt_df <- dbFetch(query, n = -1)
nyt_tweets_data %>%
rowid_to_column()
nyt_tweets_data
nyt_tweets_data %>%
rowid_to_column() %>%
dbAppendTable(con, "NYT_Tweets", .)
nyt_tweets_data %>%
dbAppendTable(con, "NYT_Tweets", .)
library(tidyverse)
library(lubridate)
library(rtweet)
library(RPostgreSQL)
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
api_key <- '2Ym959zjGjQUkVO4NSxyPOvJh'
api_secret_key <- 'OKF9h6hb46ifKyZknM5ASEVUmAmrBM2WG3Xb7nPngbqVCpvOBd'
access_token <- '828366980805754880-U17fww5lLAhs2S8cQRBN6dXv9cQFB2u'
access_token_secret <- 'ktMLoIibr6dHq2noNYHG4dDKaOy7HCKyN83qj01DXXlbw'
token <- create_token(
app = "VenmoTweetBot",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_token_secret)
nyt_tweets <- get_timeline(c("nhannahjones", "TaylorLorenz"), n = 200, token = token)
nyt_tweets_data <- nyt_tweets %>%
mutate(
Date = date(created_at),
DateTime = as_datetime(created_at)
) %>%
select(screen_name, text, status_url, is_retweet, Date,DateTime) %>%
filter(Date %in% c(today(), today() - 1))
nyt_tweets_data %>%
dbWriteTable(con, "NYT_Tweets", . , append=TRUE, row.names=FALSE, overwrite=FALSE)
dbDisconnect(con)
library(tidyverse)
library(lubridate)
library(RPostgreSQL)
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
query <- dbSendQuery(con, 'SELECT * FROM "NYT_Tweets"')
nyt_df <- dbFetch(query, n = -1)
dbDisconnect(con)
lubridate::now()
library(tidyverse)
library(lubridate)
library(RPostgreSQL)
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
query <- dbSendQuery(con, 'SELECT * FROM "NYT_Tweets"')
nyt_df <- dbFetch(query, n = -1)
dbDisconnect(con)
library(tidyverse)
library(lubridate)
library(RPostgreSQL)
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
query <- dbSendQuery(con, 'SELECT * FROM "NYT_Tweets"')
nyt_df <- dbFetch(query, n = -1)
dbDisconnect(con)
View(nyt_df)
library(tidyverse)
library(lubridate)
library(RPostgreSQL)
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
query <- dbSendQuery(con, 'SELECT * FROM "NYT_Tweets"')
nyt_df <- dbFetch(query, n = -1)
dbDisconnect(con)
View(nyt_df)
library(tidyverse)
library(lubridate)
library(RPostgreSQL)
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
query <- dbSendQuery(con, 'SELECT * FROM "NYT_Tweets"')
nyt_df <- dbFetch(query, n = -1)
dbDisconnect(con)
library(tidyverse)
library(lubridate)
library(RPostgreSQL)
### Cleaning and feature engineering data from the NYT
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
query <- dbSendQuery(con, 'SELECT * FROM "NYT_Tweets"')
nyt_df <- dbFetch(query, n = -1)
dbDisconnect(con)
View(nyt_df)
nyt_df %>%
distinct(text, .keep_all = T)
nyt_df %>%
distinct(text, .keep_all = T) %>%
as_tibble()
nyt_df %>%
distinct(text, .keep_all = T) %>%
as_tibble() -> nyt_df_distinct
nyt_df_distinct
nyt_df_distinct %>%
mutate(
clubhouse = if_else(str_detect(text, "clubhouse"))
)
nyt_df_distinct %>%
mutate(
clubhouse = if_else(str_detect(text, "clubhouse"), TRUE, FALSE)
)
nyt_df_distinct %>%
mutate(
clubhouse = if_else(str_detect(text, "clubhouse"), TRUE, FALSE)
) %>% filter(clubhouse == TRUE)
nyt_df_distinct %>%
mutate(
text = str_to_lower(text),
clubhouse = if_else(str_detect(text, "clubhouse"), TRUE, FALSE)
) %>% filter(clubhouse == TRUE)
nyt_df_distinct %>%
mutate(
text = str_to_lower(text),
detect_1619 = if_else(str_detect(text, "1619"), TRUE, FALSE),
detect_clubhouse = if_else(str_detect(text, "clubhouse"), TRUE, FALSE)
)
View(nyt_df_distinct)
install.packages("tidytext")
nyt_df_distinct %>%
mutate(
text = str_to_lower(text),
detect_1619 = ifelse(str_detect(text, "1619"), 1, 0),
detect_clubhouse = ifelse(str_detect(text, "clubhouse"), 1, 0)
)
nyt_df_distinct %>%
mutate(
text = str_to_lower(text),
detect_1619 = ifelse(str_detect(text, "1619"), 1, 0),
detect_clubhouse = ifelse(str_detect(text, "clubhouse"), 1, 0)
)
library(tidytext)
nyt_df_distinct %>%
mutate(
text = str_to_lower(text),
detect_1619 = ifelse(str_detect(text, "1619"), 1, 0),
detect_clubhouse = ifelse(str_detect(text, "clubhouse"), 1, 0)
) -> nyt_df_detects
nyt_df_detects %>%
unnest_tokens(word, text)
nrc <- get_sentiments("nrc")
install.packages("textdata")
nrc <- get_sentiments("nrc")
nrc <- get_sentiments("nrc")
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
select(sentiment)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count()
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(sentiment)
nyt_df_detects
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = text, sentiment)
nyt_df_detects
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc)
nyt_df_detects
View(nyt_df_distinct)
nyt_df %>%
distinct(text, .keep_all = T) %>%
as_tibble() %>%
rowid_to_column()
nyt_df %>%
distinct(text, .keep_all = T) %>%
as_tibble() %>%
rowid_to_column() %>%
select(-row.names)
nyt_df %>%
distinct(text, .keep_all = T) %>%
as_tibble() %>%
rowid_to_column() %>%
select(-row.names) -> nyt_df_distinct
nyt_df_distinct %>%
mutate(
text = str_to_lower(text),
detect_1619 = ifelse(str_detect(text, "1619"), 1, 0),
detect_clubhouse = ifelse(str_detect(text, "clubhouse"), 1, 0)
) -> nyt_df_detects
nyt_df_detects
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>% # Hey look we have even more varibles then usual to play with!
select(index, sentiment)
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>% # Hey look we have even more varibles then usual to play with!
select(index, sentiment) %>%
merge(nyt_df_detects, ., by = "index")
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>% # Hey look we have even more varibles then usual to play with!
select(index, sentiment)
nyt_df_detects
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>% # Hey look we have even more varibles then usual to play with!
select(index, sentiment) %>%
rename(rowid = index) %>%
right_join(., nyt_df_detects, by = "rowid")
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>% # Hey look we have even more varibles then usual to play with!
select(index, sentiment) %>%
rename(rowid = index) %>%
merge(., nyt_df_detects, by = "rowid")
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>% # Hey look we have even more varibles then usual to play with!
select(index, sentiment) %>%
rename(rowid = index) %>%
merge(nyt_df_detects, . , by = "rowid") %>%
as_tibble()
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>% # Hey look we have even more varibles then usual to play with!
select(index, sentiment) %>%
rename(rowid = index) %>%
full_join(nyt_df_detects, . , by = "rowid")
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>% # Hey look we have even more varibles then usual to play with!
select(index, sentiment) %>%
rename(rowid = index) %>%
full_join(nyt_df_detects, . , by = "rowid")
str_to_lower("3dd105bb3fdc03e30409bb9e38f11e79bbce8648")
View(nyt_df_distinct)
library(tidyverse)
library(lubridate)
library(RPostgreSQL)
library(tidytext)
### Cleaning and feature engineering data from the NYT Tweet data
nrc <- get_sentiments("nrc")
pg <- dbDriver("PostgreSQL")
con <- dbConnect(pg,
user="postgres",
password="ChinaDream1!",
host="non-profit-db.ceklc4vz23js.us-east-1.rds.amazonaws.com",
port=5432,
dbname="postgres")
query <- dbSendQuery(con, 'SELECT * FROM "NYT_Tweets"')
nyt_df <- dbFetch(query, n = -1)
dbDisconnect(con)
# Distinct Tweets
nyt_df %>%
distinct(text, .keep_all = T) %>%
as_tibble() %>%
rowid_to_column() %>%
select(-row.names) -> nyt_df_distinct
# Feature Eng various words
nyt_df_distinct %>%
mutate(
text = str_to_lower(text),
detect_1619 = ifelse(str_detect(text, "1619"), 1, 0),
detect_clubhouse = ifelse(str_detect(text, "clubhouse"), 1, 0)
) -> nyt_df_detects
nyt_df_detects %>%
unnest_tokens(word, text) %>%
inner_join(nrc) %>%
count(index = rowid, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative) %>% # Hey look we have even more varibles then usual to play with!
select(index, sentiment) %>%
rename(rowid = index) %>%
full_join(nyt_df_detects, . , by = "rowid")
setwd("~/keepa")
str_to_upper("Authorization")
setwd("~/sfl_test")
library(rtweet)
api_key <- '2Ym959zjGjQUkVO4NSxyPOvJh'
api_secret_key <- 'OKF9h6hb46ifKyZknM5ASEVUmAmrBM2WG3Xb7nPngbqVCpvOBd'
access_token <- '828366980805754880-U17fww5lLAhs2S8cQRBN6dXv9cQFB2u'
access_token_secret <- 'ktMLoIibr6dHq2noNYHG4dDKaOy7HCKyN83qj01DXXlbw'
auth_as(
rtweet_bot(
api_key =api_key,
api_secret =   api_secret_key,
access_token = access_token,
access_secret = access_token_secret
)
)
library(rtweet)
install.packages(rtweet)
install.packages("rtweet")
install.packages("rtweet")
install.packages("rtweet")
library(rtweet)
library(tidyverse)
tweets <- get_timeline(
"LarsESchonander",
n = 10000
)
date_cutoff <- Sys.Date() - 30
tweets %>%
select(status_id, created_at) %>%
filter(as.Date(created_at) < as.Date(date_cutoff)) %>%  # are older than 30 days
filter(!status_id %in% data_related_ids) %>%            # are not data-related
pull(status_id)
tweets %>%
select(status_id, created_at) %>%
filter(as.Date(created_at) < as.Date(date_cutoff)) %>%  # are older than 30 days
pull(status_id)
ids_to_delete <- tweets %>%
select(status_id, created_at) %>%
filter(as.Date(created_at) < as.Date(date_cutoff)) %>%  # are older than 30 days
pull(status_id)
total <- length(ids_to_delete)
for (i in seq_along(ids_to_delete)) {
skip_to_next <- FALSE
Sys.sleep(.5)
message("... ", i, " of ", total, " ... trying to delete ",  ids_to_delete[i])
tryCatch(
expr = post_tweet("", destroy_id = ids_to_delete[i]), # non-intuitive post request to twitter api
error = function(e) {
message("... Destroy seems to have failed for ", i, ":\n")
write(x = paste0(ids_to_delete[i], "\n", e),
file = paste0(my_dir, "/log.txt"),
append = TRUE)
skip_to_next <<- TRUE
}
) # end tryCatch
if(skip_to_next) next
}
setwd("~/avaza")
setwd("~/SenateVideoScraper")
library(readr)
MasterFile <- read_csv("SenateVideoFiles/MasterFile.csv")
View(MasterFile)
library(shiny); runApp('~/RCIProject/dashboard.R')
runApp('~/RCIProject/dashboard.R')
installed.packages("Cairo")
install.packages("Cairo")
install.packages("Cairo")
library(shiny); runApp('~/RCIProject/dashboard.R')
install.packages("cairoDevice")
runApp('~/RCIProject/dashboard.R')
reticulate::repl_python()
library(tidyverse)
masterfile <- read_csv("./SenateVideoFiles/MasterFile.csv")
basic_tags <- read_csv("basic_tags_tibble.csv")
masterfile %>%
mutate(
Tags = str_extract_all(Title, paste(basic_tags, collapse = "|")),
Tags = map_chr(Tags, toString),
Tags = gsub("\\b", '"', Tags, perl=T),
Tags = map_chr(Tags, ~ str_c("[", .x, "]"))
)
read_csv("basic_tags_tibble.csv") %>% .[[1]]
basic_tags <- read_csv("basic_tags_tibble.csv") %>% .[[1]]
masterfile %>%
mutate(
Tags = str_extract_all(Title, paste(basic_tags, collapse = "|")),
Tags = map_chr(Tags, toString),
Tags = gsub("\\b", '"', Tags, perl=T),
Tags = map_chr(Tags, ~ str_c("[", .x, "]"))
)
